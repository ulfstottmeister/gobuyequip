<head>
<style>
body {
	color: gray; /* general text color */
}

.carry {
	/* height: 150px; */ /* default value when the page loads.. should be altered as the carry items change*/
}

.block {
	display: block;
	width: 100%;
	border: none;
	background-color: #cc0000;
	//padding: 14px 28px;
	font-size: 16px;
	cursor: pointer;
	text-align: center;
}

input[type=text] {
	border: 1px solid gray;
    background-color:rgba(100, 100, 100, 0.1);
    color:gray;

}

.teamselectorb {
	width:30px;
	height:30px;
	opacity: 0.7;
}

.teamselectorb:hover {
	width:35px;
	height:35px;
	opacity: 1;
}

.slider {
    -webkit-appearance: none;
    width: 40%;
    height: 15px;
    border-radius: 5px;
    background: #d3d3d3;
    outline: none;
    opacity: 0.7;
    -webkit-transition: opacity .15s ease-in-out;
    transition: opacity .15s ease-in-out;
}

.slider:hover {
  opacity: 1;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 25px;
  height: 25px;
  border-radius: 50%;
  background: #4CAF50;
  cursor: pointer;
}

.slider::-moz-range-thumb {
  width: 25px;
  height: 25px;
  border-radius: 50%;
  background: #4CAF50;
  cursor: pointer;
}

.itempicclass {
	border: 1px solid black;
	border-radius: 20%;
}


.textinput {
    height:30px;
	width: 100%;
    transition:height 1s;
    -webkit-transition:height 1s;
}


.textinput:focus {
	color: lightgray;
    height:30px;
    font-size:16px;
}

#copyrighttext {
	color: darkgray;
	font-size: 10;
	position: fixed;
	bottom: 0;
	right: 0;
}
</style>
</head>

<script src="itemdbjson.js"></script>
<script>
db = JSON.parse(rawjson); //access like: db.weapons[0].itemname;

//var costs = 0; //sum up the costs for a kit. Can be calculated from the carry array.

var searchFilter = new Map(); //use different filter options to search items in the DB.

var carry = new Array(); //contains objects of items that the user chose to carry with them

var defaultBGgradient = 'radial-gradient(darkgray 5%, black 40%, black)';

window.addEventListener('load', function(event) {
	document.getElementById("thebody").style.background	= defaultBGgradient;
	//document.getElementById("thebody").style.background	= 'radial-gradient(#32404b 30%, #0c1417 70%, black)'; //CT background
	
	//for debug, let's configure the search filters static overe here
	searchFilter.set("team", "both"); //can be "ct", "t" or "both"
	searchFilter.set("showdisabled", false);
	searchFilter.set("maxprice", 5000);
	
	searchAndList("");
	
	sliderChanged(5000);
} );


function searchAndList(pattern) {
	pattern = pattern.toLowerCase();
	//console.log("Searchandlist: running with pattern: " + pattern);
	var outputdiv = document.getElementById("itemlist");
	outputdiv.innerHTML = ""; //clear output
	
	var resultbundle = "";
	for(var i=0; i < db.weapons.length; i++) {
		//apply search-filtering
		
		/*
			Filter by team. Filter can be set to "ct", "t" or "both".
			The items have an onlyteam field with "ct" or "t", if they are restricted to the respective team,
			or an empty string "", when the item is not team restricted
		*/
		if((searchFilter.get("team") != "both") && (db.weapons[i].onlyteam != "")) {
			if(searchFilter.get("team") != db.weapons[i].onlyteam) {
				//console.log("Filter: " + searchFilter.get("team") + " -- Item.onlyteam: " + db.weapons[i].onlyteam + " Item: " + db.weapons[i].itemname);
				continue; //skipping this loop iteration
			}
		}
		if((searchFilter.get("showdisabled") == false) && (db.weapons[i].buydisabled == true)) {
			//console.log("Filter: showdisabled:" + searchFilter.get("showdisabled") + " -- Item.buydisabled: " + db.weapons[i].buydisabled);
			continue;
		}
		if(db.weapons[i].price > searchFilter.get("maxprice")) {
			continue;
		}
		
		if(db.weapons[i].itemname.toLowerCase().includes(pattern) ||
			db.weapons[i].clearname.toLowerCase().includes(pattern) ||
			db.weapons[i].buycmd.includes(pattern) ||
			(db.weapons[i].buymenu.includes(pattern) && (db.weapons[i].buymenu != "")) ||
			db.weapons[i].price.toString() == pattern) {
			resultbundle += createItemListing(db.weapons[i].itemname);
		}
	}
	outputdiv.innerHTML = resultbundle;

}

function searchInputChanged() {
	var pattern = document.getElementById("itemsearch").value;
	searchAndList(pattern);
}

function itemnameToCarryListing(itemname) {
	var carrylisting = "<table style='display: inline-block;'><tr><td align=center>";
	carrylisting += createItemListing(itemname);
	carrylisting += "</td><tr><td align=center>";
	carrylisting += "<input type=button value='delete' onclick=clickOnCarryListingHandler(this,\'" + itemname + "\') class=block>";
	carrylisting += "</td></tr></table>";
	return carrylisting;
}

function upTo(el, tagName) {
	//find parentNode of certain tag
	tagName = tagName.toLowerCase();

	while (el && el.parentNode) {
		el = el.parentNode;
		if (el.tagName && el.tagName.toLowerCase() == tagName) {
			return el;
		}
	}

	// Many DOM methods return null if they don't 
	// find the element they are searching for
	// It would be OK to omit the following and just
	// return undefined
	return null;
}
function clickOnCarryListingHandler(button, itemname) {
	if(button.value == "delete") {
		removeFromCarry(button, itemname);
	}
}

function carryChanged() {
	console.log("Carry Changed!");
	//recalculate total costs of set
	var sumOfCosts = 0;
	for(var i=0; i < carry.length; i++) {
		sumOfCosts += getDBobjectByname(carry[i]).price;
	}
	console.log("Costs: " + sumOfCosts);
}

function addToCarry(itemname) {
	document.getElementById("carrycontainer").innerHTML += itemnameToCarryListing(itemname);
	carry.push(itemname);
	carryChanged();
}

function removeFromCarry(button, itemname) {
	//remove visual representation
	var parenttable = upTo(button, "table");
	var parentdiv = upTo(parenttable, "div");
	parentdiv.removeChild(parenttable); //remove listing

	//remove "itemname" from carry Array.
	var itemInArray = carry.indexOf(itemname); //find index in Array
	if(itemInArray >= 0) {
		carry.splice(itemInArray, 1); //remove from Array
	}
	
	carryChanged();
}

function clickOnItemHandler(listing, itemname) {
	//console.log(listing.parentNode);
	var parentdiv = upTo(listing, "div");
	
	if(parentdiv.id == "itemlist") {
		//console.log("Clicked on the search listing.");
		//invoke buy? no, add to carry. We don't buy. We just sum up carry value.
		addToCarry(itemname);
	}
	if(parentdiv.id == "carrycontainer") {
		//console.log("Clicked on equipment. Got our own handler here.");
	}
	//console.log("parentNode: " + listing.parentNode.id);
	//console.log(listing);
	//console.log(itemname);
}

function createItemListing(itemname) {
	//create an inline displayable HTML tag, that displays an item
	//we work with inline-block tables.
	var item = getDBobjectByname(itemname);

	var pricetagcolor = "darkgreen";
	if(item.buydisabled == true) {
		pricetagcolor = "darkred";
	}

	var listing = '<table style="display: inline-block;" onclick="clickOnItemHandler(this, \'' + itemname + '\')"><tr><td align=center>' +
		getItemImg(itemname) +
		'</td></tr>' +
		'<tr><td bgcolor=darkgray style="border-radius:5px" align=center><font color=black>' +
		item.clearname +
		'</font></td></tr>' + 
		'<tr><td bgcolor=darkgray style="border-radius:5px" align=center><font color="' + pricetagcolor + '" id="pricetag">' + 
		'$ ' + item.price + '</font><td></tr></table>';
		

	return listing;
}

function getDBobjectByname(itemname) {
	var item = db.weapons.find(obj => {
		return (obj.itemname === itemname)
	});
	return item;
}

function getItemImg(itemname) {
	//console.log("getItemImg: " + itemname);
	//var clearname = db.weapons.indexOf(itemname).clearname;
	var item = getDBobjectByname(itemname);
	var clearname = item.clearname;
	
	//console.log("getItemImg: clearname: " + clearname);
	var itempic = new Image();
	itempic.src = "weaponequipbyname/" + itemname + ".jpg";
	imgtag = '<img src="' + itempic.src + '" id="' + itemname + 'pic" width=100 height=90 alt="' + clearname + '" title="' + clearname + '" class="itempicclass">';
	return imgtag;
}

function sliderChanged(newmaxprice) {
	document.getElementById("maxpriceinput").value = "$" + newmaxprice;
	searchFilter.set("maxprice", newmaxprice);
	searchInputChanged(); //re-run the item search
}

function teamselectorChanged(team) {
	if(team == "ct") {
		document.getElementById("thebody").style.background	= 'radial-gradient(#32404b 30%, #0c1417 50%, black)'; //CT background
	} else if (team == "t") {
		document.getElementById("thebody").style.background	= 'radial-gradient(#6d6242 30%, #20180d 70%, black)'; //T background
	} else {
		document.getElementById("thebody").style.background	= defaultBGgradient; //default background
	}

	//document.getElementById("thebody").style.background	= 'radial-gradient(darkgray 30%, black 70%, black)'; //default background
	//document.getElementById("thebody").style.background	= 'radial-gradient(#6d6242 30%, #20180d 70%, black)'; //T background
	//document.getElementById("thebody").style.background	= 'radial-gradient(#32404b 30%, #0c1417 70%, black)'; //CT background

	searchFilter.set("team",team);
	searchInputChanged(); //re-run the item search
}

</script>
<body id=thebody>
	<div id="carrycontainer" class="carry">&nbsp;</div>

	<br>
	<input type="text" class="textinput" name="itemsearch" id="itemsearch" value="" placeholder="Search items. Examples: ak, 47, b42" onchange="searchInputChanged()" onkeyup="searchInputChanged()">
	<br>
	<input type="radio" name="teamselect" id="ct" value="ct" onchange="teamselectorChanged(this.value)" hidden><label for="ct"><img src="menupix/ct_orb.png" alt="CT" title="CT" class="teamselectorb"></label>
	<input type="radio" name="teamselect" id="t" value="t" onchange="teamselectorChanged(this.value)" hidden><label for="t"><img src="menupix/t_orb.png" alt="T" title="T" class="teamselectorb"></label>
	<input type="radio" name="teamselect" id="both" value="both" onchange="teamselectorChanged(this.value)" checked hidden><label for="both"><img src="menupix/both_orb.png" alt="both" title="both" class="teamselectorb"></label>
	<br>
	Max Money: <input type="text" id="maxpriceinput" size=5 readonly>   
	$50<input type="range" min="1" max="100" value="1000" class="slider" onchange="sliderChanged(this.value*50)" oninput="sliderChanged(this.value*50)">$5000
	<hr>

	<div id="itemlist"></div>
	<p id=copyrighttext>&copy; 2019 CSGOBuyEquipment Some Rights Reserved</p>
</body>